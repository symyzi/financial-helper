// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expense.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
    wallet_id,
    amount,
    expense_description,
    category_id
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, wallet_id, amount, expense_description, category_id, created_at
`

type CreateExpenseParams struct {
	WalletID           int64  `json:"wallet_id"`
	Amount             int64  `json:"amount"`
	ExpenseDescription string `json:"expense_description"`
	CategoryID         int64  `json:"category_id"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.queryRow(ctx, q.createExpenseStmt, createExpense,
		arg.WalletID,
		arg.Amount,
		arg.ExpenseDescription,
		arg.CategoryID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.ExpenseDescription,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteExpenseStmt, deleteExpense, id)
	return err
}

const getExpense = `-- name: GetExpense :one
SELECT id, wallet_id, amount, expense_description, category_id, created_at FROM expenses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int64) (Expense, error) {
	row := q.queryRow(ctx, q.getExpenseStmt, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.ExpenseDescription,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, wallet_id, amount, expense_description, category_id, created_at FROM expenses
LIMIT $1
OFFSET $2
`

type ListExpensesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExpenses(ctx context.Context, arg ListExpensesParams) ([]Expense, error) {
	rows, err := q.query(ctx, q.listExpensesStmt, listExpenses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.Amount,
			&i.ExpenseDescription,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET amount = $2, expense_description = $3, category_id = $4
WHERE id = $1
RETURNING id, wallet_id, amount, expense_description, category_id, created_at
`

type UpdateExpenseParams struct {
	ID                 int64  `json:"id"`
	Amount             int64  `json:"amount"`
	ExpenseDescription string `json:"expense_description"`
	CategoryID         int64  `json:"category_id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.queryRow(ctx, q.updateExpenseStmt, updateExpense,
		arg.ID,
		arg.Amount,
		arg.ExpenseDescription,
		arg.CategoryID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.ExpenseDescription,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}
