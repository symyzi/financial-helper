// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
  user_id,
  amount,
  description,
  category_id,
  transaction_date
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, amount, description, category_id, transaction_date, created_at
`

type CreateTransactionParams struct {
	UserID          int64          `json:"user_id"`
	Amount          int64          `json:"amount"`
	Description     sql.NullString `json:"description"`
	CategoryID      int64          `json:"category_id"`
	TransactionDate time.Time      `json:"transaction_date"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.CategoryID,
		arg.TransactionDate,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.CategoryID,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions 
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, id)
	return err
}

const getMonthlyTransactionStatistics = `-- name: GetMonthlyTransactionStatistics :many
SELECT DATE_TRUNC('month', transaction_date) AT TIME ZONE 'UTC' AS month, 
       SUM(amount) AS total_amount 
FROM transactions 
WHERE user_id = $1 
GROUP BY month 
ORDER BY month DESC
`

type GetMonthlyTransactionStatisticsRow struct {
	Month       interface{} `json:"month"`
	TotalAmount int64       `json:"total_amount"`
}

func (q *Queries) GetMonthlyTransactionStatistics(ctx context.Context, userID int64) ([]GetMonthlyTransactionStatisticsRow, error) {
	rows, err := q.query(ctx, q.getMonthlyTransactionStatisticsStmt, getMonthlyTransactionStatistics, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMonthlyTransactionStatisticsRow
	for rows.Next() {
		var i GetMonthlyTransactionStatisticsRow
		if err := rows.Scan(&i.Month, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAmountByCategoryAndDateRange = `-- name: GetTotalAmountByCategoryAndDateRange :many
SELECT category_id, SUM(amount) AS total_amount 
FROM transactions 
WHERE user_id = $1 AND transaction_date BETWEEN $2 AND $3 
GROUP BY category_id
`

type GetTotalAmountByCategoryAndDateRangeParams struct {
	UserID            int64     `json:"user_id"`
	TransactionDate   time.Time `json:"transaction_date"`
	TransactionDate_2 time.Time `json:"transaction_date_2"`
}

type GetTotalAmountByCategoryAndDateRangeRow struct {
	CategoryID  int64 `json:"category_id"`
	TotalAmount int64 `json:"total_amount"`
}

func (q *Queries) GetTotalAmountByCategoryAndDateRange(ctx context.Context, arg GetTotalAmountByCategoryAndDateRangeParams) ([]GetTotalAmountByCategoryAndDateRangeRow, error) {
	rows, err := q.query(ctx, q.getTotalAmountByCategoryAndDateRangeStmt, getTotalAmountByCategoryAndDateRange, arg.UserID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalAmountByCategoryAndDateRangeRow
	for rows.Next() {
		var i GetTotalAmountByCategoryAndDateRangeRow
		if err := rows.Scan(&i.CategoryID, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalTransactionAmountByUserID = `-- name: GetTotalTransactionAmountByUserID :one
SELECT SUM(amount) 
FROM transactions 
WHERE user_id = $1
`

func (q *Queries) GetTotalTransactionAmountByUserID(ctx context.Context, userID int64) (int64, error) {
	row := q.queryRow(ctx, q.getTotalTransactionAmountByUserIDStmt, getTotalTransactionAmountByUserID, userID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_id, amount, description, category_id, transaction_date, created_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id int64) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByIDStmt, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.CategoryID,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsByCategoryID = `-- name: GetTransactionsByCategoryID :many
SELECT id, user_id, amount, description, transaction_date, created_at 
FROM transactions 
WHERE category_id = $1 
ORDER BY transaction_date DESC
`

type GetTransactionsByCategoryIDRow struct {
	ID              int64          `json:"id"`
	UserID          int64          `json:"user_id"`
	Amount          int64          `json:"amount"`
	Description     sql.NullString `json:"description"`
	TransactionDate time.Time      `json:"transaction_date"`
	CreatedAt       time.Time      `json:"created_at"`
}

func (q *Queries) GetTransactionsByCategoryID(ctx context.Context, categoryID int64) ([]GetTransactionsByCategoryIDRow, error) {
	rows, err := q.query(ctx, q.getTransactionsByCategoryIDStmt, getTransactionsByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByCategoryIDRow
	for rows.Next() {
		var i GetTransactionsByCategoryIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByCategoryIDAndDateRange = `-- name: GetTransactionsByCategoryIDAndDateRange :many
SELECT id, user_id, amount, description, category_id, transaction_date, created_at FROM transactions 
WHERE user_id = $1
AND category_id = $2
AND transaction_date BETWEEN $3 AND $4
ORDER BY transaction_date DESC
`

type GetTransactionsByCategoryIDAndDateRangeParams struct {
	UserID            int64     `json:"user_id"`
	CategoryID        int64     `json:"category_id"`
	TransactionDate   time.Time `json:"transaction_date"`
	TransactionDate_2 time.Time `json:"transaction_date_2"`
}

func (q *Queries) GetTransactionsByCategoryIDAndDateRange(ctx context.Context, arg GetTransactionsByCategoryIDAndDateRangeParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsByCategoryIDAndDateRangeStmt, getTransactionsByCategoryIDAndDateRange,
		arg.UserID,
		arg.CategoryID,
		arg.TransactionDate,
		arg.TransactionDate_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.CategoryID,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByDateRange = `-- name: GetTransactionsByDateRange :many
SELECT id, user_id, amount, description, category_id, transaction_date, created_at FROM transactions
WHERE user_id = $1
AND transaction_date BETWEEN $2 AND $3
ORDER BY transaction_date DESC
`

type GetTransactionsByDateRangeParams struct {
	UserID            int64     `json:"user_id"`
	TransactionDate   time.Time `json:"transaction_date"`
	TransactionDate_2 time.Time `json:"transaction_date_2"`
}

func (q *Queries) GetTransactionsByDateRange(ctx context.Context, arg GetTransactionsByDateRangeParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsByDateRangeStmt, getTransactionsByDateRange, arg.UserID, arg.TransactionDate, arg.TransactionDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.CategoryID,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserID = `-- name: GetTransactionsByUserID :many
SELECT id, user_id, amount, description, category_id, transaction_date, created_at FROM transactions 
WHERE user_id = $1 
ORDER BY transaction_date DESC
`

func (q *Queries) GetTransactionsByUserID(ctx context.Context, userID int64) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsByUserIDStmt, getTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.CategoryID,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsWithCategoriesByUserID = `-- name: GetTransactionsWithCategoriesByUserID :many
SELECT t.id, t.user_id, t.amount, t.description, 
       t.transaction_date, c.name AS category_name 
FROM transactions t
JOIN categories c ON t.category_id = c.id 
WHERE t.user_id = $1 
ORDER BY t.transaction_date DESC
`

type GetTransactionsWithCategoriesByUserIDRow struct {
	ID              int64          `json:"id"`
	UserID          int64          `json:"user_id"`
	Amount          int64          `json:"amount"`
	Description     sql.NullString `json:"description"`
	TransactionDate time.Time      `json:"transaction_date"`
	CategoryName    string         `json:"category_name"`
}

func (q *Queries) GetTransactionsWithCategoriesByUserID(ctx context.Context, userID int64) ([]GetTransactionsWithCategoriesByUserIDRow, error) {
	rows, err := q.query(ctx, q.getTransactionsWithCategoriesByUserIDStmt, getTransactionsWithCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsWithCategoriesByUserIDRow
	for rows.Next() {
		var i GetTransactionsWithCategoriesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.TransactionDate,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, user_id, amount, description, category_id, transaction_date, created_at FROM transactions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsStmt, listTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.CategoryID,
			&i.TransactionDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions 
SET amount = $2, description = $3, category_id = $4, transaction_date = $5 
WHERE id = $1
RETURNING id, user_id, amount, description, category_id, transaction_date, created_at
`

type UpdateTransactionParams struct {
	ID              int64          `json:"id"`
	Amount          int64          `json:"amount"`
	Description     sql.NullString `json:"description"`
	CategoryID      int64          `json:"category_id"`
	TransactionDate time.Time      `json:"transaction_date"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.updateTransactionStmt, updateTransaction,
		arg.ID,
		arg.Amount,
		arg.Description,
		arg.CategoryID,
		arg.TransactionDate,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.CategoryID,
		&i.TransactionDate,
		&i.CreatedAt,
	)
	return i, err
}
