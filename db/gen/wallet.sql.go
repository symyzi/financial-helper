// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallet.sql

package db

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one

INSERT INTO wallets (
    name,
    owner,
    currency
) VALUES (
    $1, $2, $3
)
RETURNING name, id, owner, currency, created_at
`

type CreateWalletParams struct {
	Name     string `json:"name"`
	Owner    string `json:"owner"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.createWalletStmt, createWallet, arg.Name, arg.Owner, arg.Currency)
	var i Wallet
	err := row.Scan(
		&i.Name,
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteWalletStmt, deleteWallet, id)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT name, id, owner, currency, created_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int64) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletStmt, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.Name,
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listWallets = `-- name: ListWallets :many
SELECT name, id, owner, currency, created_at FROM wallets
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListWalletsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]Wallet, error) {
	rows, err := q.query(ctx, q.listWalletsStmt, listWallets, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.Name,
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
