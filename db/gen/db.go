// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBudgetStmt, err = db.PrepareContext(ctx, createBudget); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBudget: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.createExpenseStmt, err = db.PrepareContext(ctx, createExpense); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExpense: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.deleteBudgetStmt, err = db.PrepareContext(ctx, deleteBudget); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBudget: %w", err)
	}
	if q.deleteCategoryStmt, err = db.PrepareContext(ctx, deleteCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCategory: %w", err)
	}
	if q.deleteExpenseStmt, err = db.PrepareContext(ctx, deleteExpense); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpense: %w", err)
	}
	if q.deleteWalletStmt, err = db.PrepareContext(ctx, deleteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWallet: %w", err)
	}
	if q.getAllCategoriesStmt, err = db.PrepareContext(ctx, getAllCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCategories: %w", err)
	}
	if q.getBudgetByCategoryIDStmt, err = db.PrepareContext(ctx, getBudgetByCategoryID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBudgetByCategoryID: %w", err)
	}
	if q.getBudgetByIDStmt, err = db.PrepareContext(ctx, getBudgetByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBudgetByID: %w", err)
	}
	if q.getBudgetsByWalletIDStmt, err = db.PrepareContext(ctx, getBudgetsByWalletID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBudgetsByWalletID: %w", err)
	}
	if q.getCategoryByIDStmt, err = db.PrepareContext(ctx, getCategoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryByID: %w", err)
	}
	if q.getExpenseByIDStmt, err = db.PrepareContext(ctx, getExpenseByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExpenseByID: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWalletStmt, err = db.PrepareContext(ctx, getWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetWallet: %w", err)
	}
	if q.listExpensesStmt, err = db.PrepareContext(ctx, listExpenses); err != nil {
		return nil, fmt.Errorf("error preparing query ListExpenses: %w", err)
	}
	if q.listWalletsStmt, err = db.PrepareContext(ctx, listWallets); err != nil {
		return nil, fmt.Errorf("error preparing query ListWallets: %w", err)
	}
	if q.updateBudgetStmt, err = db.PrepareContext(ctx, updateBudget); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBudget: %w", err)
	}
	if q.updateCategoryStmt, err = db.PrepareContext(ctx, updateCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategory: %w", err)
	}
	if q.updateExpenseStmt, err = db.PrepareContext(ctx, updateExpense); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExpense: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBudgetStmt != nil {
		if cerr := q.createBudgetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBudgetStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.createExpenseStmt != nil {
		if cerr := q.createExpenseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExpenseStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.deleteBudgetStmt != nil {
		if cerr := q.deleteBudgetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBudgetStmt: %w", cerr)
		}
	}
	if q.deleteCategoryStmt != nil {
		if cerr := q.deleteCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCategoryStmt: %w", cerr)
		}
	}
	if q.deleteExpenseStmt != nil {
		if cerr := q.deleteExpenseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpenseStmt: %w", cerr)
		}
	}
	if q.deleteWalletStmt != nil {
		if cerr := q.deleteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWalletStmt: %w", cerr)
		}
	}
	if q.getAllCategoriesStmt != nil {
		if cerr := q.getAllCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCategoriesStmt: %w", cerr)
		}
	}
	if q.getBudgetByCategoryIDStmt != nil {
		if cerr := q.getBudgetByCategoryIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBudgetByCategoryIDStmt: %w", cerr)
		}
	}
	if q.getBudgetByIDStmt != nil {
		if cerr := q.getBudgetByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBudgetByIDStmt: %w", cerr)
		}
	}
	if q.getBudgetsByWalletIDStmt != nil {
		if cerr := q.getBudgetsByWalletIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBudgetsByWalletIDStmt: %w", cerr)
		}
	}
	if q.getCategoryByIDStmt != nil {
		if cerr := q.getCategoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryByIDStmt: %w", cerr)
		}
	}
	if q.getExpenseByIDStmt != nil {
		if cerr := q.getExpenseByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExpenseByIDStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWalletStmt != nil {
		if cerr := q.getWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletStmt: %w", cerr)
		}
	}
	if q.listExpensesStmt != nil {
		if cerr := q.listExpensesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listExpensesStmt: %w", cerr)
		}
	}
	if q.listWalletsStmt != nil {
		if cerr := q.listWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWalletsStmt: %w", cerr)
		}
	}
	if q.updateBudgetStmt != nil {
		if cerr := q.updateBudgetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBudgetStmt: %w", cerr)
		}
	}
	if q.updateCategoryStmt != nil {
		if cerr := q.updateCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryStmt: %w", cerr)
		}
	}
	if q.updateExpenseStmt != nil {
		if cerr := q.updateExpenseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExpenseStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createBudgetStmt          *sql.Stmt
	createCategoryStmt        *sql.Stmt
	createExpenseStmt         *sql.Stmt
	createUserStmt            *sql.Stmt
	createWalletStmt          *sql.Stmt
	deleteBudgetStmt          *sql.Stmt
	deleteCategoryStmt        *sql.Stmt
	deleteExpenseStmt         *sql.Stmt
	deleteWalletStmt          *sql.Stmt
	getAllCategoriesStmt      *sql.Stmt
	getBudgetByCategoryIDStmt *sql.Stmt
	getBudgetByIDStmt         *sql.Stmt
	getBudgetsByWalletIDStmt  *sql.Stmt
	getCategoryByIDStmt       *sql.Stmt
	getExpenseByIDStmt        *sql.Stmt
	getUserStmt               *sql.Stmt
	getWalletStmt             *sql.Stmt
	listExpensesStmt          *sql.Stmt
	listWalletsStmt           *sql.Stmt
	updateBudgetStmt          *sql.Stmt
	updateCategoryStmt        *sql.Stmt
	updateExpenseStmt         *sql.Stmt
	updateUserStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createBudgetStmt:          q.createBudgetStmt,
		createCategoryStmt:        q.createCategoryStmt,
		createExpenseStmt:         q.createExpenseStmt,
		createUserStmt:            q.createUserStmt,
		createWalletStmt:          q.createWalletStmt,
		deleteBudgetStmt:          q.deleteBudgetStmt,
		deleteCategoryStmt:        q.deleteCategoryStmt,
		deleteExpenseStmt:         q.deleteExpenseStmt,
		deleteWalletStmt:          q.deleteWalletStmt,
		getAllCategoriesStmt:      q.getAllCategoriesStmt,
		getBudgetByCategoryIDStmt: q.getBudgetByCategoryIDStmt,
		getBudgetByIDStmt:         q.getBudgetByIDStmt,
		getBudgetsByWalletIDStmt:  q.getBudgetsByWalletIDStmt,
		getCategoryByIDStmt:       q.getCategoryByIDStmt,
		getExpenseByIDStmt:        q.getExpenseByIDStmt,
		getUserStmt:               q.getUserStmt,
		getWalletStmt:             q.getWalletStmt,
		listExpensesStmt:          q.listExpensesStmt,
		listWalletsStmt:           q.listWalletsStmt,
		updateBudgetStmt:          q.updateBudgetStmt,
		updateCategoryStmt:        q.updateCategoryStmt,
		updateExpenseStmt:         q.updateExpenseStmt,
		updateUserStmt:            q.updateUserStmt,
	}
}
