// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budget.sql

package db

import (
	"context"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
  wallet_id,
  category_id,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id, wallet_id, amount, category_id, created_at
`

type CreateBudgetParams struct {
	WalletID   int64 `json:"wallet_id"`
	CategoryID int64 `json:"category_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.queryRow(ctx, q.createBudgetStmt, createBudget, arg.WalletID, arg.CategoryID, arg.Amount)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budgets
WHERE id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteBudgetStmt, deleteBudget, id)
	return err
}

const getBudgetByID = `-- name: GetBudgetByID :one
SELECT id, wallet_id, amount, category_id, created_at FROM budgets 
WHERE id = $1
`

func (q *Queries) GetBudgetByID(ctx context.Context, id int64) (Budget, error) {
	row := q.queryRow(ctx, q.getBudgetByIDStmt, getBudgetByID, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const listBudgets = `-- name: ListBudgets :many
SELECT id, wallet_id, amount, category_id, created_at FROM budgets
LIMIT $1
OFFSET $2
`

type ListBudgetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBudgets(ctx context.Context, arg ListBudgetsParams) ([]Budget, error) {
	rows, err := q.query(ctx, q.listBudgetsStmt, listBudgets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Budget{}
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.Amount,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets 
SET amount = $2, category_id = $3 
WHERE id = $1
RETURNING id, wallet_id, amount, category_id, created_at
`

type UpdateBudgetParams struct {
	ID         int64 `json:"id"`
	Amount     int64 `json:"amount"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.queryRow(ctx, q.updateBudgetStmt, updateBudget, arg.ID, arg.Amount, arg.CategoryID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}
